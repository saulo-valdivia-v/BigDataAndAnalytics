install.packages("dplyr")
library(dplyr)
library(dplyr)
library(readr)
#### FUNCIÓN COUNT
Ejemplo_iris %>%
group_by(Petal.Width) %>%
count(Species) #Vemos que el ancho 0,2 es el que tiene más registros (29) en el dataset
Ejemplo_iris %>%
group_by(Petal.Width) %>%
count(Species) #Vemos que el ancho 0,2 es el que tiene más registros (29) en el dataset
Ejemplo_iris <- as.data.frame(iris)
Ejemplo_mtcars <- as.data.frame(mtcars)
#### FUNCIÓN SELECT
Ejemplo_mtcars2 <- Ejemplo_mtcars %>%
#Este simbolo %>% me permite dividir el código en diferentes renglones, para ser más ordenado
select(mpg,cyl,gear)
#### FUNCIÓN SELECT
Ejemplo_mtcars2 <- Ejemplo_mtcars %>%
#Este simbolo %>% me permite dividir el código en diferentes renglones, para ser más ordenado
select(mpg,cyl,gear)
#### FUNCIÓN FILTER
Ejemplo_mtcars %>%
filter(gear > 4) #de esta forma sólo me interesan aquellos registros cuyo gear sea mayor a 4
#### FUNCIÓN ARRANGE
#Sirve para poder dar un orden a los datos, como puede ser orden descendiente
Ejemplo_iris %>%
arrange(Sepal.Width)
Ejemplo_iris %>%
arrange(desc(Sepal.Width))
#### FUNCIÓN ARRANGE
#Sirve para poder dar un orden a los datos, como puede ser orden descendiente
Ejemplo_iris %>%
arrange(Sepal.Width)
library(dplyr)
library(readr)
#### FUNCIÓN SELECT
Ejemplo_mtcars2 <- Ejemplo_mtcars %>%
#Este simbolo %>% me permite dividir el código en diferentes renglones, para ser más ordenado
select(mpg,cyl,gear)
#### FUNCIÓN COUNT
Ejemplo_iris %>%
group_by(Petal.Width) %>%
count(Species) #Vemos que el ancho 0,2 es el que tiene más registros (29) en el dataset
#Si bien Dplyr cuenta con la función Count, summarise también puede realizar conteos.
#Son dos alternativas válidas para trabajar este tipo de operación
Ejemplo_iris %>%
group_by(Species) %>%
summarise(count = n()) #Vemos la cantidad de registros que existen para cada tipo de Especie, contando las filas
#### FUNCIÓN SUMMARISE
#Summarise me permite reducir todos los valores de mi dataset a unos pocos de acuerdo a los parámetros que empleo
#Muchas veces se utiliza junto con el group by para poder establecer el criterio sobre el que se sintetizará la data
#summarise soporta muchas operaciones aritméticas y estadísticas, que pueden consulta con ?summarise
Ejemplo_iris %>%
group_by(Species) %>%
summarise(mean(Sepal.Width)) #Vemos el ancho promedio del sépalo para cada especie de flor
#Si bien Dplyr cuenta con la función Count, summarise también puede realizar conteos.
#Son dos alternativas válidas para trabajar este tipo de operación
Ejemplo_iris %>%
group_by(Species) %>%
summarise(count = n()) #Vemos la cantidad de registros que existen para cada tipo de Especie, contando las filas
#### FUNCIÓN MUTATE
Ejemplo_iris2 <- Ejemplo_iris %>%
mutate(dada = Sepal.Width * 2)
(Ejemplo_iris2)
View(Ejemplo_iris2)
#La realidad que en la práctica no suele emplearse mucho ya que cuando utilizo la función SELECT puedo indicar
#que nombres quiero que tengan las columnas del nuevo data frame:
iris_nuevo <- Ejemplo_iris %>%
select(Largo_Sepalo = Sepal.Length, Ancho_Sepalo = Sepal.Width,
Largo_Petalo = Petal.Length, Ancho_Petalo = Petal.Width)
#La realidad que en la práctica no suele emplearse mucho ya que cuando utilizo la función SELECT puedo indicar
#que nombres quiero que tengan las columnas del nuevo data frame:
iris_nuevo <- Ejemplo_iris %>%
select(Largo_Sepalo = Sepal.Length, Ancho_Sepalo = Sepal.Width,
Largo_Petalo = Petal.Length, Ancho_Petalo = Petal.Width)
#Paso 1: cargamos el archivo Dataset_Compradores.csv
Ejercicio_Dplyr <- read_csv(file.choose())
#Paso 2: Inspeccionamos Ejercicio_Dplyr para entender sus datos
str(Ejercicio_Dplyr) #todas son columnas de numeros dobles excepto algunas de texto, no hay factores ni fechas
summary(Ejercicio_Dplyr) #gracias a este vemos que el salario promedio es 100.090 y la edad promedio 37
length(unique(Ejercicio_Dplyr$CustomerId)) #vemos que existen 100.000 uniques Id por lo que no hay repetidos
table(Ejercicio_Dplyr$Geography) #al aplicar table sobre Geography descubrimos cuántos usuarios pertenecen a cada país
table(Ejercicio_Dplyr$Surname) #también podemos aplicar la función a una columna tan variada como apellido
#Paso 3: Generamos un nuevo dataframe donde filtraremos por aquellos usuarios que tienen un salario más alto de la media
Ejercicio_Dplyr_sub <- Ejercicio_Dplyr %>%
filter(EstimatedSalary > 100000) #al ejecutar nos quedamos con 5.010 filas
View(Ejercicio_Dplyr)
#Ahora hagan el ejercicio de filtrar por Gender == "Female"
Ejercicio_Dplyr_sub <- Ejercicio_Dplyr %>%
filter(Gender == 'Female')
#Ahora hagan el ejercicio de filtrar por Gender == "Female"
Ejercicio_Dplyr_sub <- Ejercicio_Dplyr %>%
filter(Gender == 'Female')
View(Ejercicio_Dplyr_sub)
#Ahora hagan el ejercicio de filtrar por Gender == "Female" con un EstimatedSalary > 100000
Ejercicio_Dplyr_sub2 <- Ejercicio_Dplyr %>%
filter(Gender == "Female" & EstimatedSalary > 100000)
View(Ejercicio_Dplyr_sub2)
#Paso 4: Agrupamos por país y vemos cual es la media de balance
Ejercicio_Dplyr_sub %>%
group_by(Geography) %>%
summarise(mean(Balance)) #Cual es el país que tiene el promedio de Balance más alto? Alemania
View(Ejercicio_Dplyr_sub)
#Calcular la suma total de Balance agrupando por Geografía y utilizando la función sum dentro de summarise
#Cual es el país cuya suma de Balance es la más baja? españa
Ejercicio_Dplyr_sub %>%
group_by(Geography) %>%
summarise(sum(Balance))
#Calcular la mediana de CreditScore utilizando la función median dentro de summarise
#Cuál es el país que tiene el CreditScore más alto?
Ejercicio_Dplyr_sub %>%
group_by(Geography) %>%
summarise(median(CreditScore))
#Paso 5: finalmente, creen un nuevo dataset donde solo contenga los registros (filas) con Geography Spain,
#seleccionen la columna Gender y realicen un count de registros femenino y masculino. Completar los espacios
#Cuantas mujeres españolas existen en el dataset? 1089
Ejercicio_Dplyr_España <- Ejercicio_Dplyr %>%
filter(Geography == "Spain") %>%
group_by(Gender) %>%
count(Gender)
View(Ejercicio_Dplyr_España)
#Ahora realicen el mismo ejercicio pero filtrando France
#Cuantos hombres franceses existen en el dataset?
Ejercicio_Dplyr_Francia <- Ejercicio_Dplyr %>%
filter(Geography == "France") %>%
group_by(Gender) %>%
count(Gender)
View(Ejercicio_Dplyr_Francia)
#Realicen un agrupamientos por apellidos y encuentren el apellido que más veces se repite
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
#group_by(Surname, Gender) %>%
group_by(Surname) %>%
count(Surname)
View(Ejercicio_Dplyr_Surname)
#Utilizando esta funcion puedo imprimir en consola rápidamente cuál es el apellido que más se repite
max(Ejercicio_Dplyr_Surname$n) #"n" es la columna que se genera por default al realizar counts
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count(Surname, Gender)
View(Ejercicio_Dplyr_Surname)
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count(Surname)
View(Ejercicio_Dplyr_Surname)
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count(Surname, Gender)
View(Ejercicio_Dplyr_Surname)
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count(Surname)
View(Ejercicio_Dplyr_Surname)
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count()
View(Ejercicio_Dplyr_Surname)
#Cuál es el apellido que más se repite en el caso de los mujeres y cuál en el caso de los hombres.
max(Ejercicio_Dplyr_Surname$n) #"n" es la columna que se genera por default al realizar counts
prueba <- Ejercicio_Dplyr_Surname %>%
filter(n == max(Ejercicio_Dplyr_Surname$n))
View(prueba)
FemaleNames <- Ejercicio_Dplyr_Surname %>%
filter(n == max(Ejercicio_Dplyr_Surname$n) & Gender == 'Female')
View(FemaleNames)
MaleNames <- Ejercicio_Dplyr_Surname %>%
filter(n == max(Ejercicio_Dplyr_Surname$n) & Gender == 'Male')
View(MaleNames)
View(Ejercicio_Dplyr)
summarise(max(Ejercicio_Dplyr_Surname$n)
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count()
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count()
summarise(max(Ejercicio_Dplyr_Surname$n))
View(Ejercicio_Dplyr_sub2)
test <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male') %>%
summarise(max(Ejercicio_Dplyr_Surname$n))
View(test)
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male') %>%
filter(n == max(Ejercicio_Dplyr_Surname$n))
View(MaleNames1)
#Paso 1: cargamos el archivo Dataset_Compradores.csv
Ejercicio_Dplyr <- read_csv(file.choose())
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count()
View(Ejercicio_Dplyr_Surname)
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count()
View(Ejercicio_Dplyr_Surname)
#Paso 1: cargamos el archivo Dataset_Compradores.csv
Ejercicio_Dplyr <- read_csv(file.choose())
#Ahora repitan el ejercicio pero no sólo agrupen por Surname, sino también por Gender, qué sucede?
Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count()
View(Ejercicio_Dplyr_Surname)
FemaleNames <- Ejercicio_Dplyr_Surname %>%
filter(n == max(Ejercicio_Dplyr_Surname$n) & Gender == 'Female')
View(FemaleNames)
MaleNames <- Ejercicio_Dplyr_Surname %>%
filter(n == max(Ejercicio_Dplyr_Surname$n) & Gender == 'Male')
View(MaleNames)
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male') %>%
filter(n == max(Ejercicio_Dplyr_Surname$n))
View(MaleNames1)
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male')
View(MaleNames1)
summarise(max(Ejercicio_Dplyr_Surname.n)
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male') %>%
summarise(max(Ejercicio_Dplyr_Surname.n))
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male') %>%
summarise(max(Ejercicio_Dplyr_Surname.n))
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male') %>%
summarise(max(Ejercicio_Dplyr_Surname.n))
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male') %>%
summarise(max(MaleNames1.n))
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male')
View(MaleNames1)
MaleNames1 <- Ejercicio_Dplyr_Surname %>%
filter(Gender == 'Male')
View(MaleNames1)
View(MaleNames1)
test2 <- Ejercicio_Dplyr_Surname <- Ejercicio_Dplyr %>%
group_by(Surname, Gender) %>%
count()
View(test2)
group_by(Surname, Gender) %>%
count()
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count()
View(test2)
summarise(n == max(n))
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count() %>%
summarise(n == max(n))
View(test2)
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count() %>%
summarise(max(n))
View(test2)
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count()
View(test2)
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count()
View(test2)
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count() %>%
select(max(n))
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count() %>%
select(max(n))
test2 <- Ejercicio_Dplyr %>%
filter(Gender == 'Male') %>%
group_by(Surname, Gender) %>%
count()
View(test2)
# Ej04. Ejecuta estas lineas de codigo de matrices. Observa y explica que ocurre
ejemplo_matrix1 <- matrix(1:15, nrow = 3, ncol = 6); ejemplo_matrix1
ejemplo_matrix2 <- matrix(1:15, nrow = 3, ncol = 5); ejemplo_matrix2
ejemplo_matrix5 <- matrix(1:21, nrow = 6, ncol = 3); ejemplo_matrix5
# Ej08. Queremos almacenar las notas textuales de un curso (SS, AP, NOT, SOB, MH).
#       ?Que objeto es el adecuado? Codifica 15 valores y ordenalos de menor a mayor.
notas <- factor(c("SS", "AP", "SOB", "NOT", "MH",
"SS", "AP", "SOB", "NOT", "MH",
"SS", "AP", "SOB", "NOT", "MH"),
levels=c("SS", "AP", "NOT", "SOB", "MH"))
sort(notas)
library("stats")
library("dplyr")
library("ggplot2")
library("tidyverse")
###Es necesario saber en qu? directorio estamos trabajando (sobre todo para importar y exportar archivos)
getwd()#directorio de trabajo actual
setwd("~/DataScience/EAE/Cursos/PerformanceAnalysis/Clase2")
###Es necesario saber en qu? directorio estamos trabajando (sobre todo para importar y exportar archivos)
getwd()#directorio de trabajo actual
file.info("GRUPOS TRABAJO.xlsx") #me permite obtener informacion de un archivo como su peso o fecha de creacion, por ejemplo
?file.info # para ver los detalles de que es cada columna
file.info("Gasto_de_los_turistas_segun_destino_princial.xlsx") #me permite obtener informacion de un archivo como su peso o fecha de creacion, por ejemplo
#Puedo listar todos los elementos que existen en el WD con las siguientes funciones
dir()#ver archivos del directorio
list.files()#ver archivos del directorio
file.info("Gasto_de_los_turistas_segun_destino_principal.xlsx") #me permite obtener informacion de un archivo como su peso o fecha de creacion, por ejemplo
file.info("Gasto_de_los_turistas_segun_destino_principal.xlsx") #me permite obtener informacion de un archivo como su peso o fecha de creacion, por ejemplo
?file.info # para ver los detalles de que es cada columna
#Puedo listar todos los elementos que existen en el WD con las siguientes funciones
dir()#ver archivos del directorio
#Leemos un archivo de datos
#si importo desde la web
datos.covid <-read.csv("agregados.csv", header =T)
#si importo desde mi carpeta
Ejemplo_CSV <- read.csv("agregados.csv", header = TRUE)
Ejemplo_CSV <- as.data.frame(Ejemplo_CSV)
library(readxl)
help(read_excel)#leer todas las opciones que nos da esta funcion
excel <- read_excel('Gasto_de_los_turistas_segun_destino_principal.xlsx',col_names = TRUE)
#aparece en Console un texto en rojo de New Names
View(excel) #nos damos cuenta que la primera fila que deberia tener los nombres de las columnas estaba vacia
View(excel)
View(excel)
#Probamos de nuevo
Archivo_excel <- read_excel("Gasto_de_los_turistas_segun_destino_principal.xlsx", col_names = TRUE, skip = 1)
View(Archivo_excel)
View(Archivo_excel)
#para inspeccionar los datos importados:
head(Archivo_excel)
tail(Archivo_excel)#no nos es muy util en este archivo
head(Ejemplo_CSV)
head(Ejemplo_CSV, n=10)# le podemos espepecificar el n? de lineas que queremos ver
tail(Ejemplo_CSV)
length(Archivo_excel)
length(Ejemplo_CSV)
dim(Archivo_excel)
length(Archivo_excel)
length(Ejemplo_CSV)
dim(Archivo_excel)
str(Archivo_excel)#muestra todas las variables y de que tipo son
View(Archivo_excel)
View(Archivo_excel)
# casting a column
Archivo_excel$Shape__Area <- as.numeric()
# casting a column
Archivo_excel$Shape__Area <- as.numeric(Archivo_excel$Shape__Area)
str(Archivo_excel)#muestra todas las variables y de que tipo son
summary(Archivo_excel)#muestra los descriptivos basicos de todas las variables
summary(Archivo_excel$Gasto_2011)
levels(Archivo_excel$Gasto_2004)   #es tan solo un vector con numeros por lo que no tiene niveles
summary(Archivo_excel$Gasto_2004)
#?c?mo podemos saber si hay datos perdidos en mi base?
Ejemplo_CSV <-read.csv("https://cnecovid.isciii.es/covid19/resources/agregados.csv", header =T)
is.na(Ejemplo_CSV)
View(Ejemplo_CSV)
View(Ejemplo_CSV)
library(readxl)
excel2 <- read_excel('Gasto_de_los_turistas_segun_destino_principal_mod.xlsx',col_names = TRUE,skip=1)
excel2 <- read_excel('Gasto_de_los_turistas_segun_destino_principal.xlsx',col_names = TRUE,skip=1)
is.na(excel2)
summary(excel2)
is.na(excel2$Gasto_2005)
mean (excel2$Gasto_2005) #como la variable tiene un NA, no nos hace el calculo
mean (excel2$Gasto_2005, na.rm=T) #este comando lo podemos usar en muchas otras funciones
mean (excel2$Gasto_2005, na.rm=T) #este comando lo podemos usar en muchas otras funciones
mean (excel2$Gasto_2005) #como la variable tiene un NA, no nos hace el calculo
mean (excel2$Gasto_2005, na.rm=T) #este comando lo podemos usar en muchas otras funciones
na.omit(excel2)#vemos que ha borrado las lineas con valores perdidos
na.omit(excel2)#vemos que ha borrado las lineas con valores perdidos
excel2 <- read_excel('Gasto_de_los_turistas_segun_destino_principal.xlsx',col_names = TRUE,skip=1)
excel2$Gasto_2005[is.na(excel2$Gasto_2005)]<-999; print(excel2)  # Sustitucion de valores perdidos
View(excel2)
View(excel2)
#***********************************MODIFICAR Y EXPORTAR DATOS
###Hemos visto con tail() que al final de los datos del COVID hay comentarios que no nos interesan
tail(Ejemplo_CSV)
#asi que eliminamos esas filas
datoscovid<-Ejemplo_CSV[1:1729,]
#***********************************MODIFICAR Y EXPORTAR DATOS
###Hemos visto con tail() que al final de los datos del COVID hay comentarios que no nos interesan
tail(Ejemplo_CSV)
# otra forma de hacerlo es esta:
datoscovid<-Ejemplo_CSV[-(1730:1738),]
### CREAMOS UN OBJETO solo CON LOS DATOS COVID DE LA COMUNIDAD DE MADRID
# DEBEMOS FILTRAR LAS FILAS CUYA VARIABLE CCAA SEA CM:
CM<-datoscovid[(datoscovid$CCAA=="CM"),]
### CREAMOS UN OBJETO solo CON LOS DATOS COVID DE LA COMUNIDAD DE MADRID
# DEBEMOS FILTRAR LAS FILAS CUYA VARIABLE CCAA SEA CM:
CM<-datoscovid[(datoscovid$CCAA=="CM"),]
### CREAMOS UN OBJETO solo CON LOS DATOS COVID DE LA COMUNIDAD DE MADRID
# DEBEMOS FILTRAR LAS FILAS CUYA VARIABLE CCAA SEA CM:
CM<-datoscovid[(datoscovid$CCAA=="CM"),]
#GUARDAMOS EL RESULADO EN un nuevo ARCHIVO llamado "datoscovidCM.csv"
write.csv(CM, "datoscovidCM.csv")
View(CM)
View(CM)
CM2<-read.csv("datoscovidCM.csv", header=T,sep=',')#comprobamos que se importa bien
View(CM2)
View(CM2)
# vemos que tiene una variable m?s que CM y es porque est? tomando el n? de fila
#como una columna mas. Para quitarla podemos hacer simplemente lo siguiente:
CM2<-CM2[,-1]
View(CM2)
View(CM2)
#------------------------------------
###Tenemos el Global environment demasiado lleno
ls()#ver los objetos del epacio de trabajo
# Ej.1 Instalar el paquete ggplot2 con codigo
install.packages("ggplot2")
# Ej.1 Instalar el paquete ggplot2 con codigo
install.packages("ggplot2")
install.packages("ggplot2")
# Ej.2 Explorar el paquete dplyr con el siguiente codigo. ?Que nos permite hacer cada una de sus funciones?
library("dplyr")
?select
?filter
?arrange
?mutate
?summarise
?group_by
# Ej.3 Averigua tu directorio de trabajo.
#       Despu?s crea una carpeta llamada B dentro de tu directorio.
#       Situate en B (establecelo como directorio de trabajo)
gtwd()
# Ej.3 Averigua tu directorio de trabajo.
#       Despu?s crea una carpeta llamada B dentro de tu directorio.
#       Situate en B (establecelo como directorio de trabajo)
getwd()
getwd()+"B"
getwd()+"B"
paste(getwd(), "B", sep="")
paste(getwd(), "/B", sep="")
mkdir(paste(getwd(), "/B", sep=""))
dir.create(paste(getwd(), "/B", sep=""))
setwd(paste(getwd(), "/B", sep=""))
getwd()
# Ej.4?C?mo podemos acceder a los datos de la Comunidad Autonoma de Andalucia en la base 'agregados'?
datoscovid <-read.csv("https://cnecovid.isciii.es/covid19/resources/agregados.csv", header =T)
View(datoscovid)
View(datoscovid)
AN<-datoscovid[(datoscovid$CCAA=="AN"),]
View(AN)
View(AN)
setwd("~/DataScience/EAE/Cursos/PerformanceAnalysis/Clase2")
# Ej5. Importar la base de datos Gasto de turistas (Excel) manteniendo el nombre de las variables.
#       Accede a alguna de las variables presentes en esa base de datos y explora sus cualidades
library(readxl)
excel <- read_excel('Gasto_de_los_turistas_segun_destino_principal.xlsx',col_names = TRUE,skip=1)
View(excel)
View(excel)
