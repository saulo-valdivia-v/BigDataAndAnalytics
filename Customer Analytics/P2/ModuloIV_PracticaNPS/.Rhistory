corrplot(M, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
#diag=FALSE
)
M <- cor(nps_tiendas_rfm)
p.mat <- cor.mtest(nps_tiendas_rfm)
#corrplot(M, method = "circle")
#corrplot(M, p.mat = res1$p, insig = "p-value", sig.level = -1)
corrplot(M, type="upper", order="hclust",
p.mat = p.mat, sig.level = 0.01)
corrplot(M, method = "circle")
View(p.mat)
head(p.mat[, 1:5])
head(p.mat)
#corrplot(M, p.mat = res1$p, insig = "p-value", sig.level = -1)
corrplot(M, type="upper", order="hclust",
p.mat = p.mat, sig.level = 0.01)
#corrplot(M, method = "circle")
corrplot(M, p.mat = res1$p, insig = "p-value", sig.level = -1)
corrplot(M, method = "circle")
View(Nps_agrupado_por_segmento)
cor.test(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM)
View(merged)
rfm_2 <- nps_tiendas_rfm %>% filter(ScoreRFM == 2)
View(rfm_2)
View(nps_tiendas_rfm)
nps_rfm_2 <- nps_tiendas_rfm %>% filter(ScoreRFM == 2)
M2 <- cor(nps_rfm_2)
corrplot(M2, method = "circle")
View(nps_rfm_2)
nps_rfm_2 <- nps_tiendas_rfm %>% filter(ScoreRFM == '2')
M2 <- cor(nps_rfm_2)
corrplot(M2, method = "circle")
nps_rfm_2 <- nps_tiendas_rfm %>% filter(ScoreRFM == '2')
M2 <- cor(nps_rfm_2)
corrplot(M2, method = "circle")
nps_rfm_2 <- nps_tiendas_rfm %>% filter(ScoreRFM == 2)
M2 <- cor(nps_rfm_2)
corrplot(M2, method = "circle")
#Calcular nps agrupando por segmento de consumidores en un nuevo data frame
nps_tiendas_rfm <- merged %>%
group_by(id_member, ScoreRFM) %>%
summarise(nps = nps(NPSN), gasto = sum(Monetary_Value))
#Ahora realicen una correlacion entre NPS y  los segmentos de consumidores de RFM
#Existen mayor correlacion con aquellos consumidores que gastan mas dinero o menos dinero?
nps_tiendas_rfm$ScoreRFM <- as.numeric(nps_tiendas_rfm$ScoreRFM)
M <- cor(nps_tiendas_rfm)
p.mat <- cor.mtest(nps_tiendas_rfm)
head(p.mat)
corrplot(M, method = "circle")
cor.test(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM)
nps_rfm_2 <- nps_tiendas_rfm %>% filter(ScoreRFM == 2)
M2 <- cor(nps_rfm_2)
corrplot(M2, method = "circle")
cor.test(nps_rfm_2$nps,nps_rfm_2$ScoreRFM)
cor.test(nps_rfm_2$nps,nps_rfm_2$ScoreRFM)
View(nps_rfm_2)
#PASO 1: Deben cargar las librerias tidyverse, lubridate, caret, corrplot y NPS
library(tidyverse)
library(lubridate)
library(caret)
library(corrplot)
library(NPS)
#PASO 2: Generen un dataset llamado ventas2020 cargando el archivo "NPS_T1.csv" eliminando primera columna
#Eliminen aquellos registros que figuren con un NPS NA utilizando filter
#Modifiquen la columna nps a columna numerica utilizando mutate y as.numeric
#Ayuda: al utilizar select si escriben select(-1) entonces se seleccionan todas las columnas excepto la primera
ventas2020 <- read.csv('NPS_T1.csv')
ventas2020['X'] = NULL
ventas2020na <- ventas2020 %>% filter(!is.na(nps))
ventas2020na <- ventas2020na %>% mutate(NPSN = as.numeric(nps))
#Calculen el NPS agrupado por cada tienda, utilizando la función nps del paquete NPS dentro de la funcion summarise
#¿cual es la tienda con mejor performance?
nps_tiendas <- ventas2020na %>%
group_by(store) %>%
summarise(nps = nps(NPSN))
arrange(nps_tiendas, desc(nps))
ventas2020mes <- ventas2020na %>% mutate(fecha=as.Date(fecha_compra))
ventas2020mes <- ventas2020mes %>% mutate(mes=month(fecha))
nps_tiendas_mes <- ventas2020mes %>%
group_by(store, mes) %>%
summarise(nps = nps(NPSN))
#visualizamos la comparación de NPS de cada tienda para cada mes
#utilicen gráfico de scatter (geom_point) y den color a los puntos con
#columna store
ggplot(nps_tiendas_mes, aes(x=nps, y=mes, shape=store, color=store)) + geom_point()
Calculo_RFM <- ventas2020mes %>%
group_by(id_member) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha)),
Frequency=length(id_member),
Monetary_Value= sum(gasto))
set.seed(1234)
SegmentacionRFM <- kmeans(scale(Calculo_RFM[,2:4]), 5, nstart = 1)
Calculo_RFM$ScoreRFM <- as.factor(SegmentacionRFM$cluster)
merged <- merge(ventas2020mes, Calculo_RFM, by = "id_member", all.x = TRUE, all.y = TRUE)
#Calcular nps agrupando por segmento de consumidores en un nuevo data frame
nps_tiendas_rfm <- merged %>%
group_by(id_member, ScoreRFM) %>%
summarise(nps = nps(NPSN), gasto = sum(Monetary_Value))
#Ahora realicen una correlacion entre NPS y  los segmentos de consumidores de RFM
#Existen mayor correlacion con aquellos consumidores que gastan mas dinero o menos dinero?
nps_tiendas_rfm$ScoreRFM <- as.numeric(nps_tiendas_rfm$ScoreRFM)
M <- cor(nps_tiendas_rfm)
p.mat <- cor.mtest(nps_tiendas_rfm)
head(p.mat)
corrplot(M, method = "circle")
View(nps_tiendas_rfm)
cor.test(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM)
#Que sucede si realizamos un promedio de NPS por cada segmentos para cada tienda?
#los segmentos puntúan muy diferente a cada tienda? Observamos algun patron?
nps_tiendas_rfm_store <- merged %>%
group_by(store, ScoreRFM) %>%
summarise(npsm = nps(NPSN))
View(nps_tiendas_rfm_store)
rfm_store_1 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_1')
mean(rfm_store_1$npsm)
rfm_store_2 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_2')
mean(rfm_store_2$npsm)
rfm_store_3 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_3')
mean(rfm_store_3$npsm)
rfm_store_4 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_4')
mean(rfm_store_4$npsm)
rfm_store_5 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_5')
mean(rfm_store_5$npsm)
View(merged)
View(nps_tiendas_rfm_store)
#PASO 1: Deben cargar las librerias tidyverse, lubridate, caret, corrplot y NPS
library(tidyverse)
library(lubridate)
library(caret)
library(corrplot)
library(NPS)
#PASO 2: Generen un dataset llamado ventas2020 cargando el archivo "NPS_T1.csv" eliminando primera columna
#Eliminen aquellos registros que figuren con un NPS NA utilizando filter
#Modifiquen la columna nps a columna numerica utilizando mutate y as.numeric
#Ayuda: al utilizar select si escriben select(-1) entonces se seleccionan todas las columnas excepto la primera
ventas2020 <- read.csv('NPS_T1.csv')
#PASO 2: Generen un dataset llamado ventas2020 cargando el archivo "NPS_T1.csv" eliminando primera columna
#Eliminen aquellos registros que figuren con un NPS NA utilizando filter
#Modifiquen la columna nps a columna numerica utilizando mutate y as.numeric
#Ayuda: al utilizar select si escriben select(-1) entonces se seleccionan todas las columnas excepto la primera
ventas2020 <- read.csv('NPS_T1.csv')
ventas2020['X'] = NULL
ventas2020na <- ventas2020 %>% filter(!is.na(nps))
ventas2020na <- ventas2020na %>% mutate(NPSN = as.numeric(nps))
#Calculen el NPS agrupado por cada tienda, utilizando la función nps del paquete NPS dentro de la funcion summarise
#¿cual es la tienda con mejor performance?
nps_tiendas <- ventas2020na %>%
group_by(store) %>%
summarise(nps = nps(NPSN))
arrange(nps_tiendas, desc(nps))
ventas2020mes <- ventas2020na %>% mutate(fecha=as.Date(fecha_compra))
ventas2020mes <- ventas2020mes %>% mutate(mes=month(fecha))
nps_tiendas_mes <- ventas2020mes %>%
group_by(store, mes) %>%
summarise(nps = nps(NPSN))
#visualizamos la comparación de NPS de cada tienda para cada mes
#utilicen gráfico de scatter (geom_point) y den color a los puntos con
#columna store
ggplot(nps_tiendas_mes, aes(x=nps, y=mes, shape=store, color=store)) + geom_point()
Calculo_RFM <- ventas2020mes %>%
group_by(id_member) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha)),
Frequency=length(id_member),
Monetary_Value= sum(gasto))
set.seed(1234)
SegmentacionRFM <- kmeans(scale(Calculo_RFM[,2:4]), 5, nstart = 1)
Calculo_RFM$ScoreRFM <- as.factor(SegmentacionRFM$cluster)
merged <- merge(ventas2020mes, Calculo_RFM, by = "id_member", all.x = TRUE, all.y = TRUE)
#Calcular nps agrupando por segmento de consumidores en un nuevo data frame
nps_tiendas_rfm <- merged %>%
group_by(id_member, ScoreRFM) %>%
summarise(nps = nps(NPSN), gasto = sum(Monetary_Value))
#Ahora realicen una correlacion entre NPS y  los segmentos de consumidores de RFM
#Existen mayor correlacion con aquellos consumidores que gastan mas dinero o menos dinero?
nps_tiendas_rfm$ScoreRFM <- as.numeric(nps_tiendas_rfm$ScoreRFM)
M <- cor(nps_tiendas_rfm)
corrplot(M, method = "circle")
cor.test(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM)
M2 <- cor(nps_rfm_2)
corrplot(M2, method = "circle")
nps_rfm_2 <- nps_tiendas_rfm %>% filter(ScoreRFM == 2)
M2 <- cor(nps_rfm_2)
corrplot(M2, method = "circle")
View(nps_rfm_2)
cor.test(nps_rfm_2$nps,nps_rfm_2$ScoreRFM)
View(nps_tiendas_rfm)
View(nps_rfm_2)
library(tidyverse)
library(lubridate)
library(caret)
library(NPS)
ventas2020 <- read.csv("NPS_T1.csv",header = TRUE, sep = ',')%>%
select(-1) %>%
filter(!is.na(nps))
mutate(ventas2020,as.numeric(nps))
str(ventas2020)
#comprobación que no existen NA
sapply(ventas2020, function(x) sum(is.na(x)))
#Calculen el NPS agrupado por cada tienda, utilizando la función nps del paquete NPS dentro de la funcion summarise
#¿cual es la tienda con mejor performance?
nps_tiendas <- ventas2020 %>%
group_by(store) %>%
summarise(Resultado_NPS=nps(nps))
mutate(ventas2020,as_date(fecha_compra))#cambiamos el tipo de la columna fecha_compra
mes<-month(ventas2020$fecha_compra)#aplicamos la funcion month para extraer el mes
ventas2020['Mes']=mes #ahora creamos la columna mes con al variable mes
nps_tienda_mes<-ventas2020 %>%
group_by(store,Mes) %>%
summarise(NPS=nps(nps))
library(ggplot2)
ggplot(nps_tienda_mes)+
geom_point(aes(x=Mes,y=NPS,color=store))+
xlim(0, 8)+
ggtitle('Comparacion NPS de Tiendas por Mes')+
theme_classic()
df_RFM<-ventas2020 %>%
select(id_member,fecha_compra,gasto)
df_RFM$fecha_compra <- as.Date(df_RFM$fecha_compra, "%Y-%m-%d")
str(df_RFM)
dim(df_RFM)
##### CALCULAMOS RFM #####
Calculo_RFM <- df_RFM %>%
group_by(id_member) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(id_member),
Monetary_Value= sum(gasto))
dim(Calculo_RFM)
#APLICAMOS ESTADISTICA DESCRIPTIVA PARA COMPRENDER EL RESULTADO
range(Calculo_RFM$Monetary_Value)
mean(Calculo_RFM$Frequency)
mean(Calculo_RFM$Monetary_Value)
mean(Calculo_RFM$Recency)
median(Calculo_RFM$Frequency)
median(Calculo_RFM$Monetary_Value)
median(Calculo_RFM$Recency)
Calculo_RFM2 <- df_RFM %>%
mutate(as.Date(fecha_compra, "%Y-%m-%d")) %>%
group_by(id_member) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(id_member),
Monetary_Value= sum(gasto))
set.seed(1234) #se puede colocar un número random, es para asegurar que sea reproducible y se obtengan los mismos resultados siempre
SegmentacionRFM <- kmeans(scale(Calculo_RFM2[,2:4]), 5, nstart = 1)
#Una vez que corre se genera una lista de 9 conjuntos de datos, que fusiono con el RFM original
Calculo_RFM2$ScoreRFM <- as.factor(SegmentacionRFM$cluster)
table(Calculo_RFM2$ScoreRFM)
#Traducimos el score numérico a un naming relevante para los equipos de marketing
Calculo_RFM2$Segmento <- NA
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 1] <- "inactivo"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 2] <- "en riesgo"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 3] <- "potenciales"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM  == 4] <- "leales"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 5] <- "champions"
#inspeccionamos la distribucion
table(Calculo_RFM2$Segmento)#calculo kmeans
table(Calculo_RFM$segmento)#calculo manual
prop.table(table(Calculo_RFM2$Segmento))
# Para asignar los Segmentos en nuestros 5 cluster, crearemos un tabla con las medias de los 5 para
# analizar y poder asignar el segmento adecuado.
tabla_cluster<-Calculo_RFM2 %>%
select(ScoreRFM,Recency,Frequency,Monetary_Value) %>%
group_by(ScoreRFM) %>%
summarise(mean(Recency),
mean(Frequency),
mean(Monetary_Value))
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 1] <- "Leal"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 2] <- "Champions"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 3] <- "Inactivo"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM  == 4] <- "Potencial"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 5] <- "En Riesgo"
table(Calculo_RFM2$Segmento)#calculo kmeans
table(Calculo_RFM$segmento)#calculo manual
Nps_agrupado_por_segmento<-ventas2020 %>%
select(id_member,nps) %>%
group_by(id_member) %>%
summarise(Nps_agrupado=nps(nps))
View(Nps_agrupado_por_segmento)
Nps_agrupado_por_segmento['Segmento']=Calculo_RFM2$Segmento
str(Nps_agrupado_por_segmento)
#Ahora realicen una correlacion entre NPS y  los segmentos de consumidores de RFM
#Existen mayor correlacion con aquellos consumidores que gastan mas dinero o menos dinero?
Nps_agrupado_por_segmento['Score']=as.integer(Calculo_RFM2$ScoreRFM)
View(Nps_agrupado_por_segmento)
cor.test(Nps_agrupado_por_segmento$Nps_agrupado,Nps_agrupado_por_segmento$Score)
#la correlacion entre segmento y nps es ´positiva pero baja de tan solo un 5%
cor(Nps_agrupado_por_segmento$Nps_agrupado,Nps_agrupado_por_segmento$Score==2)
#la correlacion es negativa con los clientes que compran más de un 7%
library(ggplot2)
ggplot(Nps_agrupado_por_segmento)+
geom_point(aes(x=Score,y=Nps_agrupado,color=Segmento))+
xlim(0, 10)+
geom_jitter(aes(x=Score,y=Nps_agrupado,color=Segmento))+
ggtitle('Comparacion NPS de Tiendas por Mes')+
theme_classic()
#M2 <- cor(nps_rfm_2)
M2 <- cor(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM==2)
corrplot(M2, method = "circle")
#M2 <- cor(nps_rfm_2)
cor(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM==2)
#Que sucede si realizamos un promedio de NPS por cada segmentos para cada tienda?
#los segmentos puntúan muy diferente a cada tienda? Observamos algun patron?
nps_tiendas_rfm_store <- merged %>%
group_by(store, ScoreRFM) %>%
summarise(npsm = nps(NPSN))
rfm_store_1 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_1')
mean(rfm_store_1$npsm)
rfm_store_2 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_2')
mean(rfm_store_2$npsm)
rfm_store_3 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_3')
mean(rfm_store_3$npsm)
rfm_store_4 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_4')
mean(rfm_store_4$npsm)
rfm_store_5 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_5')
mean(rfm_store_5$npsm)
tabla1<-ventas2020
tabla2<-Calculo_RFM2 %>%
select(id_member,ScoreRFM,Segmento)
promedio_NPS_Tienda_Segmento<-merge(tabla1,tabla2)
View(promedio_NPS_Tienda_Segmento)
promedio_NPS_Tienda_Segmento<-promedio_NPS_Tienda_Segmento %>%
select(store,nps,ScoreRFM,Segmento) %>%
group_by(store,ScoreRFM,Segmento) %>%
summarise(Media_NPS=mean(nps),
nps_real=nps(nps))
View(promedio_NPS_Tienda_Segmento)
tabla3<-Calculo_RFM2 %>%
select(id_member,ScoreRFM,Segmento,Frequency)
tabla4<-Nps_agrupado_por_segmento %>%
select(id_member,Nps_agrupado)
Frecuencia_NPS<-merge(tabla3,tabla4)
str(Frecuencia_NPS)
plot(Frecuencia_NPS)
#GRAFICO CORRELACION
ggplot(Frecuencia_NPS)+
geom_point(aes(x=Frequency,y=Nps_agrupado,color=Segmento))+
xlim(30, 80)+
ggtitle('Frecuencia de Compra y NPS')+
geom_smooth(aes(x=Frequency,y=Nps_agrupado),method = "lm")+
labs(x = "Frecuencia Compra", y = "NPS")+
theme_classic()
cor.test(Frecuencia_NPS$Frequency,Frecuencia_NPS$Nps_agrupado)
cor(Frecuencia_NPS$Frequency,Frecuencia_NPS$Nps_agrupado)
#Que sucede si correlacionamos frecuencia de compra de los 172 ids con el NPS?
#Los consumidores que tienen mayor frecuencia de compra puntúan mas y mejor?
nps_tiendas_rfm_freq <- merged %>%
group_by(id_member, Frequency) %>%
summarise(npsm = nps(NPSN))
MF <- cor(nps_tiendas_rfm_freq)
corrplot(MF, method = "circle")
plot(Frecuencia_NPS)
#GRAFICO CORRELACION
ggplot(Frecuencia_NPS)+
geom_point(aes(x=Frequency,y=Nps_agrupado,color=Segmento))+
xlim(30, 80)+
ggtitle('Frecuencia de Compra y NPS')+
geom_smooth(aes(x=Frequency,y=Nps_agrupado),method = "lm")+
labs(x = "Frecuencia Compra", y = "NPS")+
theme_classic()
cor.test(Frecuencia_NPS$Frequency,Frecuencia_NPS$Nps_agrupado)
cor(Frecuencia_NPS$Frequency,Frecuencia_NPS$Nps_agrupado)
plot(nps_tiendas_rfm_freq)
View(nps_tiendas_rfm_freq)
#Que sucede si correlacionamos frecuencia de compra de los 172 ids con el NPS?
#Los consumidores que tienen mayor frecuencia de compra puntúan mas y mejor?
nps_tiendas_rfm_freq <- merged %>%
group_by(ScoreRFM, Frequency) %>%
summarise(npsm = nps(NPSN))
View(nps_tiendas_rfm_freq)
ggplot(nps_tiendas_rfm_freq)+
geom_point(aes(x=Frequency,y=npsm,color=ScoreRFM))+
xlim(30, 80)+
ggtitle('Frecuencia de Compra y NPS')+
geom_smooth(aes(x=Frequency,y=Nps_agrupado),method = "lm")+
labs(x = "Frecuencia Compra", y = "NPS")+
theme_classic()
ggplot(nps_tiendas_rfm_freq)+
geom_point(aes(x=Frequency,y=npsm,color=ScoreRFM))+
xlim(30, 80)+
ggtitle('Frecuencia de Compra y NPS')+
geom_smooth(aes(x=Frequency,y=npsm),method = "lm")+
labs(x = "Frecuencia Compra", y = "NPS")+
theme_classic()
MF <- cor(nps_tiendas_rfm_freq)
nps_tiendas_rfm_freq$ScoreRFM <- as.numeric(nps_tiendas_rfm_freq$ScoreRFM)
MF <- cor(nps_tiendas_rfm_freq)
corrplot(MF, method = "circle")
ggplot(nps_tiendas_rfm_freq)+
geom_point(aes(x=Frequency,y=npsm,color=ScoreRFM))+
xlim(30, 80)+
ggtitle('Frecuencia de Compra y NPS')+
geom_smooth(aes(x=Frequency,y=npsm),method = "lm")+
labs(x = "Frecuencia Compra", y = "NPS")+
theme_classic()
#Que sucede si correlacionamos frecuencia de compra de los 172 ids con el NPS?
#Los consumidores que tienen mayor frecuencia de compra puntúan mas y mejor?
nps_tiendas_rfm_freq <- merged %>%
group_by(ScoreRFM, Frequency) %>%
summarise(npsm = nps(NPSN))
nps_tiendas_rfm_freq$ScoreRFM <- as.numeric(nps_tiendas_rfm_freq$ScoreRFM)
#Que sucede si correlacionamos frecuencia de compra de los 172 ids con el NPS?
#Los consumidores que tienen mayor frecuencia de compra puntúan mas y mejor?
nps_tiendas_rfm_freq <- merged %>%
group_by(ScoreRFM, Frequency) %>%
summarise(npsm = nps(NPSN))
ggplot(nps_tiendas_rfm_freq)+
geom_point(aes(x=Frequency,y=npsm,color=ScoreRFM))+
xlim(30, 80)+
ggtitle('Frecuencia de Compra y NPS')+
geom_smooth(aes(x=Frequency,y=npsm),method = "lm")+
labs(x = "Frecuencia Compra", y = "NPS")+
theme_classic()
cor.test(nps_tiendas_rfm_freq$Frequency,nps_tiendas_rfm_freq$npsm)
cor(nps_tiendas_rfm_freq$Frequency,nps_tiendas_rfm_freq$npsm)
cor.test(Frecuencia_NPS$Frequency,Frecuencia_NPS$Nps_agrupado)
cor(Frecuencia_NPS$Frequency,Frecuencia_NPS$Nps_agrupado)
#Calculen el NPS agrupado por cada tienda, utilizando la función nps del paquete NPS dentro de la funcion summarise
#¿cual es la tienda con mejor performance?
nps_tiendas <- ventas2020na %>%
group_by(store) %>%
summarise(nps = nps(NPSN))
arrange(nps_tiendas, desc(nps))
#Realizaremos un analisis entre los meses del año y el NPS para cada tienda
#para ello deben crear una columna mes en el dataframe de ventas2020
ventas2020mes <- ventas2020na %>% mutate(fecha=as.Date(fecha_compra))
#y agrupar tanto por mes como por store y calcular el nps en un nuevo data frame
ventas2020mes <- ventas2020mes %>% mutate(mes=month(fecha))
#y agrupar tanto por mes como por store y calcular el nps en un nuevo data frame
nps_tiendas_mes <- ventas2020mes %>%
group_by(store, mes) %>%
summarise(nps = nps(NPSN))
#visualizamos la comparación de NPS de cada tienda para cada mes
#utilicen gráfico de scatter (geom_point) y den color a los puntos con
#columna store
ggplot(nps_tiendas_mes, aes(x=nps, y=mes, shape=store, color=store)) + geom_point()
#Desarrollar el cálculo de RFM para cada comprador en otro dataframe
#sin olvidar de modificar la columna de  fecha para que R la reconozca como tal utilizando as.Date
#Generen 5 clusters a traves de kmean para identificar segmentos de consumidores
#pueden utilizar de referencia el script visto en el modulo II
Calculo_RFM <- ventas2020mes %>%
group_by(id_member) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha)),
Frequency=length(id_member),
Monetary_Value= sum(gasto))
set.seed(1234)
SegmentacionRFM <- kmeans(scale(Calculo_RFM[,2:4]), 5, nstart = 1)
Calculo_RFM$ScoreRFM <- as.factor(SegmentacionRFM$cluster)
merged <- merge(ventas2020mes, Calculo_RFM, by = "id_member", all.x = TRUE, all.y = TRUE)
Calculo_RFM_Cluster<-merged %>%
select(ScoreRFM,Recency,Frequency,Monetary_Value) %>%
group_by(ScoreRFM) %>%
summarise(mean(Recency),
mean(Frequency),
mean(Monetary_Value))
View(Calculo_RFM_Cluster)
#Calcular nps agrupando por segmento de consumidores en un nuevo data frame
nps_tiendas_rfm <- merged %>%
group_by(id_member, ScoreRFM) %>%
summarise(nps = nps(NPSN), gasto = sum(Monetary_Value))
#Ahora realicen una correlacion entre NPS y  los segmentos de consumidores de RFM
nps_tiendas_rfm$ScoreRFM <- as.numeric(nps_tiendas_rfm$ScoreRFM)
M <- cor(nps_tiendas_rfm)
corrplot(M, method = "circle")
cor.test(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM)
#Existen mayor correlacion con aquellos consumidores que gastan mas dinero o menos dinero?
# RESPUESTA: La correlacion es negativa con los clientes que compran más de un 7%
cor(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM==2)
#Existen mayor correlacion con aquellos consumidores que gastan mas dinero o menos dinero?
# RESPUESTA: La correlacion es negativa con los clientes que compran más de un 7%
cor(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM==1)
cor(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM==2)
View(Calculo_RFM_Cluster)
#Existen mayor correlacion con aquellos consumidores que gastan mas dinero o menos dinero?
# RESPUESTA: La correlacion es negativa con los clientes
cor(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM==2)
cor(nps_tiendas_rfm$nps,nps_tiendas_rfm$ScoreRFM==3)
#Que sucede si realizamos un promedio de NPS por cada segmentos para cada tienda?
#los segmentos puntúan muy diferente a cada tienda? Observamos algun patron?
nps_tiendas_rfm_store <- merged %>%
group_by(store, ScoreRFM) %>%
summarise(npsm = nps(NPSN))
rfm_store_1 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_1')
mean(rfm_store_1$npsm)
rfm_store_2 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_2')
mean(rfm_store_2$npsm)
rfm_store_3 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_3')
mean(rfm_store_3$npsm)
rfm_store_4 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_4')
mean(rfm_store_4$npsm)
rfm_store_5 <- nps_tiendas_rfm_store %>% filter(store == 'tienda_5')
mean(rfm_store_5$npsm)
nps_tiendas_rfm_freq <- merged %>%
group_by(id_member,ScoreRFM,Segmento,Frequency) %>%
summarise(npsm = nps(NPSN))
nps_tiendas_rfm_freq <- merged %>%
group_by(id_member,ScoreRFM,Frequency) %>%
summarise(npsm = nps(NPSN))
View(nps_tiendas_rfm_freq)
ggplot(nps_tiendas_rfm_freq)+
geom_point(aes(x=Frequency,y=npsm,color=ScoreRFM))+
xlim(30, 80)+
ggtitle('Frecuencia de Compra y NPS')+
geom_smooth(aes(x=Frequency,y=npsm),method = "lm")+
labs(x = "Frecuencia Compra", y = "NPS")+
theme_classic()
cor.test(nps_tiendas_rfm_freq$Frequency,nps_tiendas_rfm_freq$npsm)
cor(nps_tiendas_rfm_freq$Frequency,nps_tiendas_rfm_freq$npsm)
