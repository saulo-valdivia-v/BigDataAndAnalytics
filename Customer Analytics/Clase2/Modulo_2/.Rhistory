#Métricas de Negocio
library(readxl)
library(dplyr)
# Cargamos el archivo excel dataset_RFM
dataset_RFM <- read_excel(file.choose())
dataset_RFM <- read_excel("dataset_RFM.xlsx")
##### EXPLORAR DATA PARA COMPRENDER SUS CARACTERÍSTICAS #####
head(dataset_RFM)
summary(dataset_RFM)
# Modificamos naming columnas para que tengan sentido
colnames(dataset_RFM) = c('customer_id', 'gross_compra', 'fecha_compra')
# Ajustamos fecha y generamos una nueva variable solo con año para facilitar análisis
dataset_RFM$fecha_compra <- as.Date(dataset_RFM$fecha_compra, "%Y-%m-%d")
dataset_RFM$year <- as.numeric(format(dataset_RFM$fecha_compra, "%Y"))
#Exploramos nuevamente para ver los cambios
head(dataset_RFM)
summary(dataset_RFM)
table(dataset_RFM$a?o)
table(dataset_RFM$year)
prop.table(table(dataset_RFM$year))
#Si quiero realizar comparativas de los datos mas relevantes estre diferents factores, puedo utilizar
#la función by en conjunción con summary para obtener una inspeccion mas profunda de los datos
by(dataset_RFM, dataset_RFM$year, FUN = summary)
##### CALCULAMOS RFM #####
Calculo_RFM <- dataset_RFM %>%
group_by(customer_id) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
View(Calculo_RFM) #si recency da números negativos extraños es porque no reconoce la fecha_compra como tal
##### CALCULAMOS RFM FILTRANDO LAS COMPRAS DESDE 2019 #####
Calculo_RFM2019 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(fecha_compra > "2019-01-01") %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
View(Calculo_RFM2019)
View(dataset_RFM)
#cargamos el archivo dataset
dataset_RFM <- read_excel("dataset_RFM.xlsx")
#cargamos el archivo dataset
dataset_RFM <- read_excel("dataset_RFM.xlsx") %>%
mutate(customer_id = V1, gross_compra = V2, fecha_compra = V3)
View(dataset_RFM)
#cargamos el archivo dataset
dataset_RFM <- read_excel("dataset_RFM.xlsx") %>%
rename(customer_id = V1, gross_compra = V2, fecha_compra = V3)
#cargamos el archivo dataset
dataset_RFM <- read_excel("dataset_RFM.xlsx") %>%
rename(customer_id = V1, gross_compra = V2, fecha_compra = V3) %>%
mutate(fecha_compra = as.Date(fecha_compra, "%Y-%m-%d"))
View(dataset_RFM)
Calculo_RFM <- dataset_RFM %>%
group_by(customer_id) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
View(Calculo_RFM)
#Realizamos el scoring agregando las columnas a nuestro dataset general
Calculo_RFM$ScoreRecency <- NA
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.20)]<-1
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.40) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.20)]<-2
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.60) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.40)]<-3
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.80) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.60)]<-4
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency >= quantile(Calculo_RFM$Recency,0.80)]<-5
View(Calculo_RFM)
#confirmamos que es correcto
table(Calculo_RFM$ScoreRecency)
Calculo_RFM$ScoreFrequency <- NA
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.20)]<-1
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.20) & Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.40)]<-2
Calculo_RFM$ScoreFrequency <- NA
Calculo_RFM$ScoreFrequency <- NULL
Calculo_RFM$ScoreFrequency <- NA
warning()
warning(alculo_RFM$ScoreFrequency)
warning(Calculo_RFM$ScoreFrequency)
table(Calculo_RFM$ScoreFrequency)
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.20)]<-1
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.20) & Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.40)]<-2
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.60) & Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.40)]<-3
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.80) & Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.60)]<-4
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency >= quantile(Calculo_RFM$Frequency,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreFrequency)
Calculo_RFM$ScoreMV <- NA
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.20)]<-1
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.20)]<-1
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.40) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.20)]<-2
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.60) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.40)]<-3
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.80) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.60)]<-4
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreMV)
#Scoring final sumando los anteriores
Calculo_RFM$ScoreRFM <- rowSums (Calculo_RFM[ , c(5:6,8)])
#Scoring final sumando los anteriores
Calculo_RFM$ScoreRFM <- rowSums (Calculo_RFM[ , c(5:6,7)])
#Realizamos el scoring agregando las columnas a nuestro dataset general
Calculo_RFM$ScoreRecency <- NA
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.20)]<-1
#confirmamos que es correcto
table(Calculo_RFM$ScoreRecency)
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.40) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.20)]<-2
#confirmamos que es correcto
table(Calculo_RFM$ScoreRecency)
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.60) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.40)]<-3
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.80) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.60)]<-4
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency >= quantile(Calculo_RFM$Recency,0.80)]<-5
#Asignamos un segmento de consumidor de acuerdo a su score
Calculo_RFM$segment[which(Calculo_RFM$ScoreRFM < 4)] = "inactivo"
Calculo_RFM$segment[which(Calculo_RFM$ScoreRFM >= 4 & Calculo_RFM$ScoreRFM < 7)] = "en riesgo"
#Asignamos un segmento de consumidor de acuerdo a su score
Calculo_RFM$segment[which(Calculo_RFM$ScoreRFM < 4)] = "inactivo"
#Asignamos un segmento de consumidor de acuerdo a su score
Calculo_RFM$segmento <- NA
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM < 4)] = "inactivo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 4 & Calculo_RFM$ScoreRFM < 7)] = "en riesgo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 7 & Calculo_RFM$ScoreRFM < 10)] = "potenciales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 10 & Calculo_RFM$ScoreRFM < 13)] = "leales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 13)] = "champions"
#confirmamos que es correcto
table(Calculo_RFM$segmento)
Calculo_RFM2 <- dataset_RFM %>%
mutate(as.Date(fecha_compra, "%Y-%m-%d")) %>%
filter(fecha_compra > "2019-01-01") %>%
group_by(customer_id) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
#Utilizamos el algoritmo k-means para clusterizar y generar 5 clusters de consumidores
#k-means es un algoritmo no supervisado porque no le proporciono reglas (etiquetas), sino que identifica
#patrones y agrupa los datos según la cantidad de cluster/grupos que le indico
#aprenderán más sobre los algoritmos de clustering en segundo cuatrimestre
set.seed(1234) #se puede colocar un número random, es para asegurar que sea reproducible y se obtengan los mismos resultados siempre
SegmentacionRFM <- kmeans(scale(Calculo_RFM2[,2:4]), 5, nstart = 1)
#Una vez que corre se genera una lista de 9 conjuntos de datos, que fusiono con el RFM original
Calculo_RFM2$ScoreRFM <- as.factor(SegmentacionRFM$cluster)
#Traducimos el score numérico a un naming relevante para los equipos de marketing
Calculo_RFM2$Segmento <- NA
View(Calculo_RFM2)
table(Calculo_RFM2$ScoreRFM)
#Traducimos el score numérico a un naming relevante para los equipos de marketing
Calculo_RFM2$NSegmento <- NA
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 1] <- "inactivo"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 2] <- "en riesgo"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 3] <- "potenciales"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM  == 4] <- "leales"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 5] <- "champions"
#inspeccionamos la distribucion
table(Calculo_RFM2$Segmento)
prop.table(table(Calculo_RFM2$Segmento))
#Métricas de Negocio
library(readxl)
library(dplyr)
dataset_RFM <- read_excel("dataset_RFM.xlsx")
##### EXPLORAR DATA PARA COMPRENDER SUS CARACTERÍSTICAS #####
head(dataset_RFM)
summary(dataset_RFM)
# Modificamos naming columnas para que tengan sentido
colnames(dataset_RFM) = c('customer_id', 'gross_compra', 'fecha_compra')
##### EXPLORAR DATA PARA COMPRENDER SUS CARACTERÍSTICAS #####
head(dataset_RFM)
# Ajustamos fecha y generamos una nueva variable solo con año para facilitar análisis
dataset_RFM$fecha_compra <- as.Date(dataset_RFM$fecha_compra, "%Y-%m-%d")
dataset_RFM$year <- as.numeric(format(dataset_RFM$fecha_compra, "%Y"))
#Exploramos nuevamente para ver los cambios
head(dataset_RFM)
summary(dataset_RFM)
table(dataset_RFM$year)
prop.table(table(dataset_RFM$year))
##### CALCULAMOS RFM FILTRANDO LAS COMPRAS DESDE 2019 #####
Calculo_RFM2019 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(fecha_compra > "2019-01-01") %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
View(Calculo_RFM2019) #vemos el resultado
#prueben realizar el filtro 2019 pero utilizando la columna year
Calculo_RFM2019 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(Year > 2019) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
#prueben realizar el filtro 2019 pero utilizando la columna year
Calculo_RFM2019 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(Year > "2019") %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
##### APLICAMOS ESTADISTICA DESCRIPTIVA PARA COMPRENDER EL RESULTADO #####
range(Calculo_RFM$Monetary_Value)
##### CALCULAMOS RFM FILTRANDO LAS COMPRAS DESDE 2019 #####
Calculo_RFM2019 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(fecha_compra > "2019-01-01") %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
##### APLICAMOS ESTADISTICA DESCRIPTIVA PARA COMPRENDER EL RESULTADO #####
range(Calculo_RFM$Monetary_Value)
##### CALCULAMOS RFM #####
Calculo_RFM <- dataset_RFM %>%
group_by(customer_id) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
##### CALCULAMOS RFM FILTRANDO LAS COMPRAS DESDE 2019 #####
Calculo_RFM2019 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(fecha_compra > "2019-01-01") %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
##### APLICAMOS ESTADISTICA DESCRIPTIVA PARA COMPRENDER EL RESULTADO #####
range(Calculo_RFM$Monetary_Value)
mean(Calculo_RFM$Recency)
median(Calculo_RFM$Frequency)
median(Calculo_RFM$Monetary_Value)
median(Calculo_RFM$Recency)
median(Calculo_RFM$Recency)
mean(Calculo_RFM$Recency)
median(Calculo_RFM$Frequency)
median(Calculo_RFM$Monetary_Value)
median(Calculo_RFM$Recency)
quantile(Calculo_RFM$Frequency,0.70)
quantile(Calculo_RFM$Frequency,0.90)
quantile(Calculo_RFM$Recency,0.90)
quantile(Calculo_RFM$Recency,0.70)
head(dataset_RFM)
##### EJERCICIO
#Utilizando la función de filtrado de Dplyr, generar un nuevo dataset que contenga solo los datos de 2018
#Pista: necesito indicar que el año == 2018
#Calcular nuevamente las columnas de RFM para ese año en específico.
Calculo_RFM2018 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(year > 2018) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
##### EJERCICIO
#Utilizando la función de filtrado de Dplyr, generar un nuevo dataset que contenga solo los datos de 2018
#Pista: necesito indicar que el año == 2018
#Calcular nuevamente las columnas de RFM para ese año en específico.
Calculo_RFM2018 <- dataset_RFM %>%
group_by(customer_id) %>%
filter(year == 2018) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
dataset_RFM %>%
group_by(customer_id) %>%
filter(year == 2018 & year == 2019) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
dataset_RFM %>%
group_by(customer_id) %>%
filter(year == 2018 & year == 2019) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(Total=sum(year == 2018))
dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(Total=sum(year == 2019))
dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(n2018=sum(year==2018),
n2019=sum(year==2019),
Total=sum(year == 2019))
dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(n2018=sum(year==2018),
n2019=sum(year==2019),
Total=(n2018-n2019)/n2019)
dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(n2018=sum(year==2018),
n2019=sum(year==2019),
n89=sum(customer_id),
Total=(n2018-n2019)/n89)
dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(n2018=sum(year==2018),
n2019=sum(year==2019),
Total=(n2018-n2019)/n2019)
churn <- dataset_RFM %>%
group_by(customer_id) %>%
filter(year %in% c(2018,2019)) %>%
summarise(n2018=sum(year==2018),
n2019=sum(year==2019),
Total=(n2018-n2019)/n2019)
View(churn)
View(churn)
churn <- dataset_RFM %>%
group_by(year) %>%
filter(year %in% c(2018,2019)) %>%
summarise(n2018=sum(year==2018),
n2019=sum(year==2019),
Total=(n2018-n2019)/n2019)
View(churn)
View(churn)
install.packages("caret")
library(readxl)
library(dplyr)
library(caret)
#cargamos el archivo dataset, limpiamos y calculamos RFM
dataset_RFM <- read_excel("dataset_RFM.xlsx") %>%
rename(customer_id = V1, gross_compra = V2, fecha_compra = V3) %>%
mutate(fecha_compra = as.Date(fecha_compra, "%Y-%m-%d")) #dara warnings de time zone
Calculo_RFM <- dataset_RFM %>%
group_by(customer_id) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
#Realizamos el scoring agregando las columnas a nuestro dataset general
Calculo_RFM$ScoreRecency <- NA
Calculo_RFM$ScoreFrequency <- NA
Calculo_RFM$ScoreMV <- NA
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.20)]<-1
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.40) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.20)]<-2
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.60) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.40)]<-3
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.80) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.60)]<-4
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency >= quantile(Calculo_RFM$Recency,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreRecency)
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.20)]<-1
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.20) & Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.40)]<-2
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.60) & Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.40)]<-3
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.80) & Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.60)]<-4
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency >= quantile(Calculo_RFM$Frequency,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreFrequency)
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.20)]<-1
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.40) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.20)]<-2
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.60) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.40)]<-3
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.80) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.60)]<-4
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreMV)
#Asignamos un segmento de consumidor de acuerdo a su score
Calculo_RFM$segmento <- NA
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM < 4)] = "inactivo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 4 & Calculo_RFM$ScoreRFM < 7)] = "en riesgo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 7 & Calculo_RFM$ScoreRFM < 10)] = "potenciales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 10 & Calculo_RFM$ScoreRFM < 13)] = "leales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 13)] = "champions"
#confirmamos que es correcto
table(Calculo_RFM$segmento)
#confirmamos que es correcto
table(Calculo_RFM$segmento)
#Asignamos un segmento de consumidor de acuerdo a su score
Calculo_RFM$segmento <- NA
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM < 4)] = "inactivo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 4 & Calculo_RFM$ScoreRFM < 7)] = "en riesgo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 7 & Calculo_RFM$ScoreRFM < 10)] = "potenciales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 10 & Calculo_RFM$ScoreRFM < 13)] = "leales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 13)] = "champions"
#confirmamos que es correcto
table(Calculo_RFM$segmento)
#Realizamos el scoring agregando las columnas a nuestro dataset general
Calculo_RFM$ScoreRecency <- NA
Calculo_RFM$ScoreFrequency <- NA
Calculo_RFM$ScoreMV <- NA
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.20)]<-1
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.40) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.20)]<-2
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.60) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.40)]<-3
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency <= quantile(Calculo_RFM$Recency,0.80) & Calculo_RFM$Recency > quantile(Calculo_RFM$Recency,0.60)]<-4
Calculo_RFM$ScoreRecency[Calculo_RFM$Recency >= quantile(Calculo_RFM$Recency,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreRecency)
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.20)]<-1
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.20) & Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.40)]<-2
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.60) & Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.40)]<-3
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency <= quantile(Calculo_RFM$Frequency,0.80) & Calculo_RFM$Frequency > quantile(Calculo_RFM$Frequency,0.60)]<-4
Calculo_RFM$ScoreFrequency[Calculo_RFM$Frequency >= quantile(Calculo_RFM$Frequency,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreFrequency)
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.20)]<-1
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.40) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.20)]<-2
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.60) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.40)]<-3
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value <= quantile(Calculo_RFM$Monetary_Value,0.80) & Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.60)]<-4
Calculo_RFM$ScoreMV[Calculo_RFM$Monetary_Value >= quantile(Calculo_RFM$Monetary_Value,0.80)]<-5
#confirmamos que es correcto
table(Calculo_RFM$ScoreMV)
#Scoring final sumando los anteriores
Calculo_RFM$ScoreRFM <- rowSums (Calculo_RFM[ , c(5:6,7)])
#Asignamos un segmento de consumidor de acuerdo a su score
Calculo_RFM$segmento <- NA
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM < 4)] = "inactivo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 4 & Calculo_RFM$ScoreRFM < 7)] = "en riesgo"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 7 & Calculo_RFM$ScoreRFM < 10)] = "potenciales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 10 & Calculo_RFM$ScoreRFM < 13)] = "leales"
Calculo_RFM$segmento[which(Calculo_RFM$ScoreRFM >= 13)] = "champions"
#confirmamos que es correcto
table(Calculo_RFM$segmento)
Calculo_RFM2 <- dataset_RFM %>%
mutate(as.Date(fecha_compra, "%Y-%m-%d")) %>%
filter(fecha_compra > "2019-01-01") %>%
group_by(customer_id) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra))
#Utilizamos el algoritmo k-means para clusterizar y generar 5 clusters de consumidores
#k-means es un algoritmo no supervisado porque no le proporciono reglas (etiquetas), sino que identifica
#patrones y agrupa los datos según la cantidad de cluster/grupos que le indico
#aprenderán más sobre los algoritmos de clustering en segundo cuatrimestre
set.seed(1234) #se puede colocar un número random, es para asegurar que sea reproducible y se obtengan los mismos resultados siempre
SegmentacionRFM <- kmeans(scale(Calculo_RFM2[,2:4]), 5, nstart = 1)
View(SegmentacionRFM)
#Una vez que corre se genera una lista de 9 conjuntos de datos, que fusiono con el RFM original
Calculo_RFM2$ScoreRFM <- as.factor(SegmentacionRFM$cluster)
table(Calculo_RFM2$ScoreRFM) #comparen con la tabla de frecuencias del ejercicio manual sobre 2019
#Traducimos el score numérico a un naming relevante para los equipos de marketing
Calculo_RFM2$NSegmento <- NA
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 1] <- "inactivo"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 2] <- "en riesgo"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 3] <- "potenciales"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM  == 4] <- "leales"
Calculo_RFM2$Segmento[Calculo_RFM2$ScoreRFM == 5] <- "champions"
#inspeccionamos la distribucion
table(Calculo_RFM2$Segmento)
prop.table(table(Calculo_RFM2$Segmento))
churn <- dataset_RFM %>%
group_by(year) %>%
filter(year %in% c(2018,2019)) %>%
summarise(n2018=sum(year==2018),
n2019=sum(year==2019),
Total=(n2018-n2019)/n2019)
setwd("~/DataScience/EAE/R_Project")
