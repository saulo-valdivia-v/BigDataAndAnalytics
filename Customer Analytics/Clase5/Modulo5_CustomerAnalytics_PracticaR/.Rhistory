geom_point(mapping = aes(x = displ, y = hwy, color=class))+
facet_grid(drv~class,scales="free_x") #tambien free_y
#mtcars$cyl2 <- factor(mtcars$cyl, labels = c("alpha", "beta", "gamma"))
#solucion
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, color=class)) +
facet_grid(drv~class,scales="free", labeller = label_both)
load(file="datos/recidiva.RData")
# Pon aquí tu código:
# Solucion
ggplot(data = datos)+geom_point(mapping = aes(x = AFP.pre.TxH,y = Tumor.Tot))+facet_grid(.~Recurrencia)
ggplot(data = datos)+geom_point(mapping = aes(x = AFP.pre.TxH,y = Tumor.Tot))+facet_grid(.~Recurrencia) +
scale_x_log10()
p <-ggplot(data = datos)+geom_point(mapping = aes(x = AFP.pre.TxH,y = Tumor.Tot))+facet_grid(.~Recurrencia)
p +  scale_x_log10()
data(iris)
p <- ggplot(iris, aes(x = Sepal.Width))
p + geom_histogram()
p + geom_bar()
p + stat_bin()
data("diamonds")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) + stat_count(mapping = aes(x = cut))
library(MASS)
str(mammals)
head(mammals)
mam.new <- data.frame(body = log10(mammals$body))
ggplot(mam.new, aes(x = body)) +
# usamos "..variable.." para acceder a variables calculadas: density, count, ncount y ndensity
geom_histogram(aes( y = ..density..)) +
geom_rug() +
stat_function(fun = dnorm, colour = "red",
arg = list(mean = mean(mam.new$body), sd = sd(mam.new$body)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
#comparar con el anterior
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = "red"), position = "dodge")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = clarity), position = "dodge")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "stack")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
#ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, fill = "red"), position = "dodge")  no funciona porque no hay y
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1) +
coord_polar()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1) +
labs(x = NULL, y = NULL) +
coord_polar()
raw.data<-data.frame(stringsAsFactors=FALSE,
Tematica = c("Medio ambiente", "Transporte", "Sociedad y Bienestar",
"Urbanismo e Infraestructuras", "Salud", "Turismo",
"Cultura y Ocio", "Sector Público", "Comercio", "Economía", "Industria",
"Hacienda", "Ciencia y Tecnología", "Educación", "Seguridad",
"Vivienda", "Demografía", "Deporte", "Empleo", "Energía", "Otras"),
Valencia = c(37L, 27L, 26L, 20L, 15L, 10L, 5L, 5L, 3L, 3L, 0L, 3L, 1L, 1L,
1L, 1L, 0L, 0L, 0L, 0L, 0L),
Londres = c(100L, 81L, 5L, 58L, 82L, 15L, 21L, 105L, 62L, 62L, 62L, 62L,
0L, 61L, 43L, 82L, 167L, 22L, 103L, 0L, 36L),
Milan = c(23L, 21L, 28L, 38L, 0L, 19L, 14L, 14L, 0L, 68L, 6L, 0L, 0L,
18L, 0L, 0L, 88L, 1L, 0L, 0L, 13L),
Madrid = c(32L, 56L, 26L, 25L, 16L, 10L, 20L, 51L, 5L, 8L, 0L, 17L, 3L,
7L, 9L, 1L, 2L, 19L, 2L, 0L, 1L),
Barcelona = c(14L, 41L, 10L, 43L, 0L, 3L, 52L, 49L, 8L, 0L, 0L, 0L, 2L, 1L,
6L, 59L, 130L, 2L, 5L, 0L, 1L)
)
head(raw.data)
#convierte las columnas 2 a 6 en una variable llamada Ciudad y el número en Conjunto de datos
DF <- pivot_longer(raw.data, cols=c(2:6), names_to = "Ciudad", values_to = "Conjuntos_de_datos")
DF$Ciudad<-as.factor(DF$Ciudad)
head(DF)
#There are two types of bar charts: geom_bar makes the height of the bar proportional to the number of cases in each group (or if the weight aethetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use geom_col instead. geom_bar uses stat_count by default: it counts the number of cases at each x position. geom_col uses stat_identity: it leaves the data as is.
library(tidyverse)
library(forcats)
# Pon aquí tu código:
# Opcion 1a:
ggplot(DF, aes(Ciudad,Conjuntos_de_datos)) +
geom_col(aes(fill = Tematica))
# Opcion 1b:
DF$Ciudad <- fct_reorder(DF$Ciudad,DF$"Conjuntos_de_datos",sum, desc=TRUE)
ggplot(DF, aes(Ciudad, Conjuntos_de_datos)) +
geom_col(aes(fill = Tematica))
# Opcion 2:
#DF$Tematica <- fct_reorder(DF$Tematica, DF$Conjuntos_de_datos,sum)
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad))
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad))
# Opción 2b:
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad))+
coord_flip()
# Opcion 2c:
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad), position = "dodge") +
coord_flip()
# Opcion 2d:
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad), position = "fill") +
coord_flip()
# Pon aquí tu código:
#soluciones
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) + geom_col(aes(Tematica, fill=Ciudad)) + facet_grid(. ~ Ciudad)
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) + geom_col(aes(Tematica, fill=Ciudad)) + facet_grid(. ~ Ciudad) +coord_flip()
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) + geom_col(aes(Tematica, fill=Ciudad)) + facet_wrap( ~ Ciudad) +coord_flip()
library(knitr)
library(formatR)
opts_chunk$set(
echo=TRUE,
eval=TRUE,
warning=FALSE,
message=FALSE,
tidy = TRUE, # re-format it for me!
tidy.opts=list(blank=FALSE, width.cutoff=60,size = 'normalsize'),
dev.args=list(bg='white', pointsize=10),
fig.width=8,
fig.height=4,
fig.path='figuras/')
knitr::opts_chunk$set()
library(tidyverse)
#library(ggplot2)
library(ggplot2)
data(mpg)
str(mpg)
head(mpg, 10)
tail(mpg)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(mpg) +
geom_point(aes(displ,hwy)) +
geom_line(aes(displ, cty), col="blue")
p <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
p <- ggplot(data = mpg)
# Pon aquí tu código:
#http://sape.inf.usi.ch/quick-reference/ggplot2/colour
#http://sape.inf.usi.ch/quick-reference/ggplot2/linetype
#http://sape.inf.usi.ch/quick-reference/ggplot2/shape
#http://sape.inf.usi.ch/quick-reference/ggplot2/size
library(ggplot2)
data(mpg)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color=class))
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color="red")
p <- ggplot(data = mpg)
str(mpg)
# Pon aquí tu código:
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=T) +    # se = standard deviation, sombreado
geom_smooth(method="lm", col="red")
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_jitter(aes(color=class)) +
geom_smooth(se=T)
# Pon aquí tu código:
# Pon aquí tu código:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class),size=3,show.legend=FALSE)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class),size=3,show.legend=FALSE) +
facet_grid(.~class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class),size=3,show.legend=FALSE) +
facet_grid(class~.)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, color=class))+
facet_grid(drv~class)
load(file="datos/recidiva.RData")
load(file="datos/recidiva.RData")
# Pon aquí tu código:
data(iris)
p <- ggplot(iris, aes(x = Sepal.Width))
p + geom_histogram()
p + geom_bar()
p + stat_bin()
data("diamonds")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) + stat_count(mapping = aes(x = cut))
library(MASS)
str(mammals)
head(mammals)
mam.new <- data.frame(body = log10(mammals$body))
ggplot(mam.new, aes(x = body)) +
# usamos "..variable.." para acceder a variables calculadas: density, count, ncount y ndensity
geom_histogram(aes( y = ..density..)) +
geom_rug()
# stat_function(fun = dnorm, colour = "red",
#               arg = list(mean = mean(mam.new$body), sd = sd(mam.new$body)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
#comparar con el anterior
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = "red"), position = "dodge")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = clarity), position = "dodge")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "stack")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
#ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, fill = "red"), position = "dodge")  no funciona porque no hay y
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1) +
coord_polar()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1) +
labs(x = NULL, y = NULL) +
coord_polar()
raw.data<-data.frame(stringsAsFactors=FALSE,
Tematica = c("Medio ambiente", "Transporte", "Sociedad y Bienestar",
"Urbanismo e Infraestructuras", "Salud", "Turismo",
"Cultura y Ocio", "Sector Público", "Comercio", "Economía", "Industria",
"Hacienda", "Ciencia y Tecnología", "Educación", "Seguridad",
"Vivienda", "Demografía", "Deporte", "Empleo", "Energía", "Otras"),
Valencia = c(37L, 27L, 26L, 20L, 15L, 10L, 5L, 5L, 3L, 3L, 0L, 3L, 1L, 1L,
1L, 1L, 0L, 0L, 0L, 0L, 0L),
Londres = c(100L, 81L, 5L, 58L, 82L, 15L, 21L, 105L, 62L, 62L, 62L, 62L,
0L, 61L, 43L, 82L, 167L, 22L, 103L, 0L, 36L),
Milan = c(23L, 21L, 28L, 38L, 0L, 19L, 14L, 14L, 0L, 68L, 6L, 0L, 0L,
18L, 0L, 0L, 88L, 1L, 0L, 0L, 13L),
Madrid = c(32L, 56L, 26L, 25L, 16L, 10L, 20L, 51L, 5L, 8L, 0L, 17L, 3L,
7L, 9L, 1L, 2L, 19L, 2L, 0L, 1L),
Barcelona = c(14L, 41L, 10L, 43L, 0L, 3L, 52L, 49L, 8L, 0L, 0L, 0L, 2L, 1L,
6L, 59L, 130L, 2L, 5L, 0L, 1L)
)
#convierte las columnas 2 a 6 en una variable llamada Ciudad y el valor en Conjunto de datos
DF <- pivot_longer(raw.data, cols=c(2:6), names_to = "Ciudad", values_to = "Conjuntos_de_datos")
DF$Ciudad<-as.factor(DF$Ciudad)
head(DF)
# There are two types of bar charts: geom_bar makes the height of the bar proportional to the number of cases in each group (or if the weight aethetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use geom_col instead. geom_bar uses stat_count by default: it counts the number of cases at each x position. geom_col uses stat_identity: it leaves the data as is.
library(tidyverse)
library(forcats)
# Pon aquí tu código:
ggplot(data= DF, mapping= aes(x=Ciudad, y=Conjuntos_de_datos)) +
geom_col()
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad))
# Opción 2b:
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad))+
coord_flip()
# Opcion 2c:
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad), position = "dodge") +
coord_flip()
# Opcion 2d:
ggplot(DF, aes(Tematica, Conjuntos_de_datos)) +
geom_col(aes(fill = Ciudad), position = "fill") +
coord_flip()
# Pon aquí tu código:
# Pon aquí tu código:
ggplot(diamonds, aes(x = price, fill = color)) +
geom_histogram(position = "dodge", binwidth = 10000)+
scale_fill_brewer(type = "seq", palette = 1)+
coord_flip()
z <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_jitter(alpha = 0.7) +
scale_color_brewer("Species",palette = "Dark2",labels = c("Setosa","Versicolor","Virginica")) +
scale_y_continuous("Width (cm)", limits = c(2, 4.5), expand = c(0, 0)) +
scale_x_continuous("Length (cm)", limits = c(4, 8), expand = c(0, 0)) +
ggtitle("Sepals") +
coord_fixed(1)
z
z + theme(panel.background = element_blank(),
legend.background = element_blank(),
legend.key = element_blank(),
panel.grid = element_blank(),
axis.text = element_text(colour = "black"),
axis.line = element_line(colour = "black"))
theme_iris <- theme(panel.background = element_blank(),
legend.background = element_blank(),
legend.key = element_blank(),
panel.grid = element_blank(),
axis.text = element_text(colour = "black"),
axis.line = element_line(colour = "black"))
z
z + theme_iris
library(ggthemes)
z + theme_wsj()
z + theme_excel_new()
z + theme_gdocs()
z + theme_economist()
#install.packages("esquisse")
library(dplyr)
library(ggplot2)
library(esquisse)
#esquisser(mpg)
#esquisser(iris)
library(ggplot2)
library(gridExtra)
set.seed(123)
var=rnorm(1000)
# Con qplot: no requiere dataframe
plot1 <- qplot(var , bins = 30,fill=I(rgb(0.1,0.2,0.4,0.6)) ) # sin Tema
plot2 = plot1+theme_bw()+
annotate("text", x = -1.9, y = 75, label = "bw()" , col="orange" , size=4)
plot3 = plot1+theme_classic()+
annotate("text", x = -1.9, y = 75, label = "classic()" , col="red" , size=4)
plot4 = plot1+theme_gray()+
annotate("text", x = -1.9, y = 75, label = "gray()" , col="green" , size=4)
grid.arrange(plot1,plot2,plot3,plot4, ncol=2) # disposicion en 2x1
# geom_histogram requiere dataframe:
ggplot(as.data.frame(var))+geom_histogram(aes(x=var))
# geom_boxplot proposes several arguments to custom appearance
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(
# custom boxes
color="blue",
fill="blue",
alpha=0.2,
# Notch?
notch=TRUE,
notchwidth = 0.8,
# custom outliers
outlier.colour="red",
outlier.fill="red",
outlier.size=3
)
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5)
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5) +
geom_density(adjust=1.5,alpha=0.1)
library(ggridges)
ggplot(diamonds, aes(x = price, y = cut, fill = cut)) +
geom_density_ridges()
ggplot(diamonds, aes(x = price, y = cut, fill = cut)) +
geom_density_ridges() +
theme_ridges()
ggplot(diamonds, aes(x = price, y = cut, fill = cut)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
library(ggExtra)
p<-ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) +
geom_point() +
theme(legend.position="none")
pm <- ggMarginal(p, type="histogram") # con marginal histogram
pm
p
library(ellipse)
library(RColorBrewer)
data=cor(mtcars)
my_colors=colorRampPalette(brewer.pal(5, "Spectral"))(100) # Build a Pannel of 100 colors with Rcolor Brewer
ord <- order(data[1, ]) # Order the correlation matrix
data_ord<-data[ord, ord]
plotcorr(data_ord, col=my_colors[data_ord*50+50] , mar=c(1,1,1,1)  )
load(file="datos/recidiva.RData")
library(ggcorrplot)
#solucion
idx.num <- sapply(datos, is.numeric)
numericas <- datos[idx.num]
corr <- cor(numericas, method = "pearson", use = "complete.obs")
ggcorrplot(corr, hc.order = TRUE, lab = TRUE,lab_size = 2)
data=as.matrix(mtcars)
heatmap(data, scale="column")
ggplot(diamonds, aes(x=depth, y=carat) ) +
geom_hex(bins = 20)
# +
#   theme_bw()
data <- data.frame(name=letters[1:5],
value=sample(seq(4,15),5),sd=c(1,0.2,3,2,4))
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar(aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4,
colour="orange", alpha=0.9, size=1.3) +coord_flip()
ggplot(data) +
geom_bar( aes(x=name, y=value, fill=name), stat="identity", alpha=0.5) +
geom_errorbar(aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4,
colour="orange", alpha=0.9, size=1.3) +coord_flip()
value1=abs(rnorm(26))*2
data=data.frame(x=LETTERS[1:26], value1=value1, value2=value1+1+rnorm(26, sd=1) )
data = data %>% rowwise() %>% mutate( mymean = mean(c(value1,value2) )) %>% arrange(mymean) %>% mutate(x=factor(x, x))
ggplot(data) + # plot
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=value1), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()
library(likert) # library
data(pisaitems) # Use a provided dataset
items28 <- pisaitems[, substr(names(pisaitems), 1, 5) == "ST24Q"]
#pisaitems %>% select(starts_with("ST24Q")) -> items29
plot(likert(items28)) # Realize the plot
library(fmsb)
set.seed(99)
data=as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5))
colnames(data)=c("math" , "english" , "biology" , "music" , "R-coding" )
rownames(data)=paste("mister" , letters[1:3] , sep="-")
data=rbind(rep(20,5) , rep(0,5) , data) # max y min: obligado incluirlos
radarchart(data)
library(treemap)# library
group=c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup=paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(group,subgroup,value)
treemap(data,index=c("group","subgroup"),vSize="value",type="index")
#solucion
treemap(DF,index=c("Ciudad","Tematica"),vSize ="Conjuntos_de_datos")
#?strftime
day=as.Date("2017-06-14") - 0:364
value=runif(365) + seq(-140, 224)^2 / 10000
data=data.frame(day, value)
p<-ggplot(data, aes(x=day, y=value)) +geom_line() +xlab("")
p<-p + scale_x_date(date_breaks = "2 week", date_labels = "%b %d")
p + theme(axis.text.x=element_text(angle=60, hjust=1))
library(igraph)
network=graph_from_literal( A-B-C-D, E-A, D-C-A, D-A-D-C-B )
plot(network)
library(igraph); set.seed(10)
data<-matrix(sample(0:2, 25, replace=TRUE), nrow=5)
data
colnames(data)=rownames(data)=LETTERS[1:5]
data
network<-graph_from_adjacency_matrix(data) #adjency matrix
plot(network)
set.seed(10)
links=data.frame(
source=c("A","A", "A", "A", "A","F", "B"),
target=c("B","B", "C", "D", "F","A","E"))
nodes=data.frame(
name=LETTERS[1:6],
carac=c( rep(10,3), rep(20,3)))
links
nodes
network=graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(network)
plot(network, vertex.size=nodes$carac)
library(igraph)
network=graph_from_literal( A-E, S-E, E-O, E-R, O-T, R-T)
plot(network)
library(igraph)
tree <- graph.tree(10)
tree <- set.edge.attribute(tree, "color", value="black")
plot(tree,layout=layout.reingold.tilford(tree,root=1,flip.y=TRUE))
library(maps)
str(map_data("world"))
head(map_data("world"))
map_data("world") %>% filter(region=="UK") -> UK
world.cities %>% filter(country.etc=="UK") -> data
library(ggrepel)
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="blue", alpha=0.5) +
theme_void() + ylim(50,59) + coord_map() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="blue", alpha=0.5) +
geom_point( data=data, aes(x=long, y=lat, alpha=pop)) +
geom_text_repel( data=data %>% arrange(pop) %>% tail(10), aes(x=long, y=lat, label=name), size=5) +
geom_point( data=data %>% arrange(pop) %>% tail(10), aes(x=long, y=lat), color="red", size=3) +
theme_void() + ylim(50,59) + coord_map() +
theme(legend.position="none")
library(maps)
map_data("world") %>% filter(region=="Spain") -> SP
world.cities %>% filter(country.etc=="Spain") -> data
library(ggrepel)
# Pon aquí tu código:
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
world <- ne_countries(scale = "medium", returnclass = "sf")
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$name)), " countries)"))
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$name)), " countries)")) +
theme_void()
library("ggspatial")
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-30, 50), ylim = c(30, 70))
library(readxl)
library(dplyr)
dataset_RFM <- read_excel("datos/dataset_RFM.xlsx")
# Modificamos naming columnas para que tengan sentido
colnames(dataset_RFM) = c('customer_id', 'gross_compra', 'fecha_compra')
# Ajustamos fecha y generamos una nueva variable solo con año para facilitar análisis
dataset_RFM$fecha_compra <- as.Date(dataset_RFM$fecha_compra, "%Y-%m-%d")
dataset_RFM$year <- as.numeric(format(dataset_RFM$fecha_compra, "%Y"))
# Calculamos RFM
Calculo_RFM <- dataset_RFM %>%
group_by(customer_id) %>%
summarise(Recency=as.numeric(as.Date(Sys.Date())-max(fecha_compra)),
Frequency=length(customer_id),
Monetary_Value= sum(gross_compra),
year= max(year))
# Filtramos últimos 3 años
Calculo_RFM_filtered <- Calculo_RFM %>%
filter(year %in% c(2018, 2019, 2020))
head(Calculo_RFM_filtered)
library(plotly)
fig <- plot_ly(x= Calculo_RFM_filtered$Recency,
y= Calculo_RFM_filtered$Frequency,
z= Calculo_RFM_filtered$Monetary_Value,
type="scatter3d",
mode="markers",
color=factor(Calculo_RFM_filtered$year),
colors=c('red2', 'blue2', 'green3'))
fig <- fig %>% layout(title = 'Visualizing RFM in 3D',
scene = list(xaxis = list(title = 'Recency'),
yaxis = list(title = 'Frequency'),
zaxis = list(title = 'Monetary Value')))
fig
Calculo_RFM <- read_excel("datos/Calculo_RFM.xlsx")
head(Calculo_RFM)
# Pon aquí tu código:
